//
//  PeriodQNAViewController.swift
//  Moody
//
//  Created by Neha Pant on 26/06/2019.
//  Copyright (c) 2019 Neha Pant. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

private let CellIdentifier = "CellIdentifier"
private let titleStr = "Do you have periods?"
private let sectionHeaderHeight = 250
private let heightOfCell:CGFloat = 44.0
private let cancelTitle = "CANCEL"
protocol PeriodQNADisplayLogic: class
{
}

class PeriodQNAViewController: UIViewController, PeriodQNADisplayLogic
{
    var interactor: PeriodQNABusinessLogic?
    var router: (NSObjectProtocol & PeriodQNARoutingLogic & PeriodQNADataPassing)?
    @IBOutlet weak var bottomView: MBottomView!
    @IBOutlet weak var qnaTableView: UITableView!
    var qNAArray = ["Yes, I do","No, I donâ€™t"]
    var qNADataSource = PeriodQNA.periodQNADataSource.ViewModel(qna: [])
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = PeriodQNAInteractor()
        let presenter = PeriodQNAPresenter()
        let router = PeriodQNARouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        loadCell() // load cell
        setUpBottomView() //set bootom view
        addQNA() //add questions
        bottomView.setLeftBtnTitle(title: cancelTitle)
    }
    /**
        load cell
    */
    fileprivate func loadCell() {
        let nib = UINib(nibName: "MQNACellTableViewCell", bundle: nil)
        qnaTableView.register(nib, forCellReuseIdentifier: CellIdentifier)
    }
    /**
     load Bottom view
     */
    fileprivate func setUpBottomView() {
        bottomView.leftBtnClickedBlock = {[weak self] () -> Void in
            self?.router?.popScreen()
        }
        bottomView.rightBtnClickedBlock = {[weak self] () -> Void in
            self?.router?.routeNextScreen()
        }
    }
    fileprivate func addQNA() {
        var qnaLocArray = [QNA]()
        for item in qNAArray {
            let qa = QNA()
            qa.isSelected = false
            qa.qnaStr = item
            qnaLocArray.append(qa)
        }
        qNADataSource = PeriodQNA.periodQNADataSource.ViewModel(qna: qnaLocArray)
    }
}
extension PeriodQNAViewController: UITableViewDataSource, UITableViewDelegate {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat
    {
        return heightOfCell
    }
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView?
    {
        let tempView:MTopTitleView = MTopTitleView(frame: CGRect(x: 0, y: 0, width: Int(tableView.frame.width), height: sectionHeaderHeight))
        tempView.titleLbl.text = titleStr
        return tempView
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return qNAArray.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier) as? MQNACellTableViewCell
        cell?.selectionStyle = .none
        cell?.qnaTxt.text = "" //Text For QNA
        
        if let array = qNADataSource.qna {
            cell?.qnaTxt.text = array[indexPath.row].qnaStr
            if array[indexPath.row].qnaStr == MoodyData.shared.aboutPeriod {
                array[indexPath.row].isSelected = true
                cell?.rightIconSelected()
                bottomView.setRightBtnSelectedState()
            }else {
                if array[indexPath.row].isSelected == true {
                    cell?.rightIconSelected()
                    //when radio button is selected
                    bottomView.setRightBtnSelectedState()
                }else {
                    cell?.rightIconUnSelected()
                }
            }
        }
        return cell!
        
    }
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if let array = qNADataSource.qna {
            MoodyData.shared.aboutPeriod = array[indexPath.row].qnaStr
            if array[indexPath.row].isSelected == true {
            } else {
                //make all item as false
                for (index, _) in array.enumerated() {
                    array[index].isSelected = false
                }
                array[indexPath.row].isSelected = true
            }
        }
        tableView.reloadData()
    }
}
